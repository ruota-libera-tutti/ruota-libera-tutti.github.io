<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://alemangui.github.io/tag/d%C3%A9veloppement/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://alemangui.github.io/" rel="alternate" type="text/html" />
  <updated>2020-08-21T10:11:07+02:00</updated>
  <id>http://alemangui.github.io/tag/d%C3%A9veloppement/feed.xml</id>

  
  
  

  
    <title type="html">Alejandro Mantecón Guillén | </title>
  

  
    <subtitle>Le blog d'Alejandro Mantecón Guillén</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Tests automatiques avec autoplay</title>
      <link href="http://alemangui.github.io/tests-automatiques-avec-autoplay" rel="alternate" type="text/html" title="Tests automatiques avec autoplay" />
      <published>2020-03-25T00:00:00+01:00</published>
      <updated>2020-03-25T00:00:00+01:00</updated>
      <id>http://alemangui.github.io/tests-automatiques-avec-autoplay</id>
      <content type="html" xml:base="http://alemangui.github.io/tests-automatiques-avec-autoplay">&lt;p&gt;Depuis 2017, les différents navigateurs implémentent des fonctionnalités permettant de bloquer le son qui démarre automatiquement. Ceci n’a rien d’étonnant : on a tous vécu la nuisance des vidéos en autoplay qui se cachent parmi les nombreux onglets du navigateur. Néanmoins, pour les développeurs qui se basent de façon légitime sur l’autoplay (notamment pour des jeux vidéos ou applications multimédia), ces restrictions peuvent causer des difficultés.&lt;/p&gt;

&lt;h2 id=&quot;les-tests-chez-pizzicato-js&quot;&gt;Les tests chez Pizzicato JS&lt;/h2&gt;

&lt;p&gt;J’ai rencontré un de ces problèmes dans le cadre du développement de &lt;a href=&quot;https://alemangui.github.io/pizzicato/&quot;&gt;Pizzicato JS&lt;/a&gt;, une librairie visant à simplifier la création et manipulation du son dans le navigateur (&lt;a href=&quot;github.com/alemangui/pizzicato/&quot;&gt;code source ouvert&lt;/a&gt;). Pizzicato compte une batterie de tests automatiques interagissant avec l’API WebAudio. Ces tests sont exécutés en Chrome depuis Travis CI à chaque nouveau commit.&lt;/p&gt;

&lt;p&gt;Avec les versions récentes de Chrome, les tests qui dépendent du son échouent systématiquement :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/failed-build.jpg&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Chrome 80.0.3987 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Linux 0.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Sound actions should trigger &lt;span class=&quot;s1&quot;&gt;'end'&lt;/span&gt; when buffer ended FAILED
	Expected spy endCallback to have been called.
	    at tests/Sound.test.js:270:26

Chrome 80.0.3987 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Linux 0.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Executed 118 of 144 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 FAILED&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 secs / 2.516 secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Chrome 80.0.3987 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Linux 0.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Sound actions should offset upon playing when specified FAILED
	Expected spy endCallback to have been called.
	    at tests/Sound.test.js:287:26

Chrome 80.0.3987 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Linux 0.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Executed 119 of 144 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 FAILED&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 secs / 4.527 secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;la-politique-autoplay-de-chrome&quot;&gt;La politique Autoplay de Chrome&lt;/h2&gt;

&lt;p&gt;Cet échec n’est pas un mystère : les tests vont à l’encontre de la politique autoplay de Chrome : pas d’audio sans interaction utilisateur. Or, dans un contexte ou les tests automatiques se déroulent dans un processus virtuel au sein de Travis CI, l’interaction utilisateur est impossible.&lt;/p&gt;

&lt;p&gt;Heureusement, on peut lancer Chrome avec une option spéciale pour lui demander de désactiver cette politique :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Chrome &lt;span class=&quot;nt&quot;&gt;--autoplay-policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no-user-gesture-required&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pour intégrer ceci dans Pizzicato, il suffit de modifier le &lt;a href=&quot;https://github.com/alemangui/pizzicato/blob/master/karma.conf.js&quot;&gt;fichier de configuration de Karma&lt;/a&gt;. Au moment de définir les &lt;code class=&quot;highlighter-rouge&quot;&gt;customLaunchers&lt;/code&gt; nous pouvons aussi profiter pour passer des arguments additionnels.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;customLaunchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;Chrome_travis_ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Chrome'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'--no-sandbox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'--autoplay-policy=no-user-gesture-required'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;TravisCI est vert à nouveau.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/successful-build.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;et-dans-la-vraie-vie-&quot;&gt;Et dans la vraie vie ?&lt;/h2&gt;

&lt;p&gt;Comprendre les conditions qui mènent les navigateurs à bloquer le contenu audio est utile pour que nos utilisateurs puissent profiter du web sans devoir bidouiller des options obscures dans la ligne de commande.&lt;/p&gt;

&lt;h3 id=&quot;chrome&quot;&gt;Chrome&lt;/h3&gt;

&lt;p&gt;Dans Chrome, l’autoplay en muet (volume 0) est permis - d’où les boutons “Tap to unmute” qui apparaissent un peu partout. Sinon, il faut impérativement un de ces scénarios :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;l’utilisateur a interagit avec la page (par ex. en clickant quelque part),&lt;/li&gt;
  &lt;li&gt;l’utilisateur a ajouté le site dans son écran d’accueil ou l’a installé en tant que Progressive Web App, ou&lt;/li&gt;
  &lt;li&gt;le site a un &lt;em&gt;Media Engagement Index&lt;/em&gt; (MEI) suffisant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ce dernier point peut paraître un peu obscur. Le MEI tente de mesurer à quel point l’usager est habitué à consommer de l’audio/vidéo sur un site particulier. Pour ce faire, Chrome fait le calcul du ratio des visites totales contre les visites incluant une consommation média considéré comme suffisante (çad plus de sept secondes, audio non-muet, onglet actif et taille d’écran supérieure à 200x140).&lt;/p&gt;

&lt;p&gt;Pour les utilisateurs de Chrome, ces stats sont visibles sur &lt;a href=&quot;chrome://media-engagement&quot;&gt;chrome://media-engagement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/mei.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;firefox&quot;&gt;Firefox&lt;/h3&gt;

&lt;p&gt;Les règles de Firefox sont similaires à celles de Chrome : l’audio en muet est permis et l’interaction utilisateur est requise pour tout ce qui est audible.&lt;/p&gt;

&lt;p&gt;De plus, Firefox permet l’autoplay si l’utilisateur a déjà donné la permission au site d’accéder à la camera ou le micro. Ceci s’avère utile pour les sites de vidéo-conférence.&lt;/p&gt;

&lt;p&gt;En ce qui concerne les sites “de confiance” Firefox opte pour une approche plus direct. Lorsqu’un site avec autoplay est bloqué, une icône apparaît dans la barre URL. L’usager peut clicker dessus et manuellement indiquer que le site peut faire de l’autoplay sans que le navigateur s’en mêle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/autoplay-ff.jpg&quot; /&gt;
&lt;small class=&quot;caption&quot;&gt;Image de &lt;a href=&quot;https://hacks.mozilla.org/2019/02/firefox-66-to-block-automatically-playing-audible-video-and-audio/&quot;&gt;Mozilla&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;ce-nest-pas-fini&quot;&gt;Ce n’est pas fini&lt;/h2&gt;

&lt;p&gt;Les règles autour de l’audio et vidéo sur les navigateurs vont encore évoluer de façon importante dans les années qui viennent. Des discussions autour de l’étendue des restrictions autoplay &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1420389&quot;&gt;se déroulent encore&lt;/a&gt;. D’un côté, démarrer des vidéos automatiquement, même sans audio, consomme des données des forfaits potentiellement limités. D’un autre, &lt;a href=&quot;https://www.bleepingcomputer.com/news/google/google-fixes-issue-that-broke-millions-of-web-based-games-in-chrome/&quot;&gt;plein des applications multimédia&lt;/a&gt; dépendent de cette fonctionnalité. En tant que développeurs, il faudra suivre de près cette évolution.&lt;/p&gt;

&lt;h2 id=&quot;en-savoir-plus&quot;&gt;En savoir plus&lt;/h2&gt;

&lt;p&gt;Malheureusement, la plupart de la documentation autour des politiques autoplay des navigateurs est exclusivement en anglais. Voici quelques exemples :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Détails sur la &lt;a href=&quot;https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#mei&quot;&gt;politique autoplay Chrome&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Article de Chris Pearce concernant &lt;a href=&quot;https://hacks.mozilla.org/2019/02/firefox-66-to-block-automatically-playing-audible-video-and-audio/&quot;&gt;l’autoplay sur Firefox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Article de Kevin Decker sur &lt;a href=&quot;https://webkit.org/blog/7734/auto-play-policy-changes-for-macos/&quot;&gt;l’autoplay sur Safari&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation de la politique &lt;a href=&quot;https://docs.microsoft.com/fr-fr/microsoft-edge/dev-guide/browser-features/autoplay-policies&quot;&gt;autoplay sur Edge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="Développement" />
      
        <category term="JS" />
      

      
        <summary type="html">Les navigateurs implémentent des fonctionnalités permettant de bloquer le contenu audio qui démarre automatiquement. Comment s'en sortir en tant que développeur ?</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Mesurer la performance avec Locust</title>
      <link href="http://alemangui.github.io/locust" rel="alternate" type="text/html" title="Mesurer la performance avec Locust" />
      <published>2020-02-11T00:00:00+01:00</published>
      <updated>2020-02-11T00:00:00+01:00</updated>
      <id>http://alemangui.github.io/locust</id>
      <content type="html" xml:base="http://alemangui.github.io/locust">&lt;p&gt;Toute application doit pouvoir répondre à un certain nombre de requêtes sous un temps minimum jugé comme acceptable. Ceci peut varier énormément. Google fait face à des millions d’utilisateurs et se fixe des objectifs de performance très ambitieux. D’un autre côté, un système de gestion d’inventaires d’une petite épicerie difficilement aura plus d’une poignée d’utilisateurs et n’aura pas les mêmes contraintes de temps de réponse.&lt;/p&gt;

&lt;p&gt;Les tests de charge servent à assurer que notre application réponde à nos objectifs liés au nombre d’utilisateurs simultanées et temps de réponse. C’est là que &lt;a href=&quot;https://locust.io/&quot;&gt;Locust&lt;/a&gt; rentre en action : un outil pour simuler des utilisateurs virtuels et permettre leur analyse. Par rapport aux alternatives Locust a un grand plus : on écrit nos tests en Python pur et dur.&lt;/p&gt;

&lt;h2 id=&quot;préparons-le-terrain&quot;&gt;Préparons le terrain&lt;/h2&gt;

&lt;p&gt;Avant de jouer avec Locust, il faut bien qu’on ait quelque chose à tester. Pour le fun, nous allons faire un hello-world avec Flask.&lt;/p&gt;

&lt;p&gt;Je vais d’abord démarrer un environnement virtuel avec Python 3 dans un dossier vide, suivi de l’installation de Flask avec &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;» virtualenv &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; python3 venv
» &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; venv/bin/activate
» pip install flask&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Créons maintenant un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.py&lt;/code&gt; avec le code disponible dans le &lt;a href=&quot;https://flask.palletsprojects.com/en/1.1.x/quickstart/#a-minimal-application&quot;&gt;site Flask&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello, World!'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et voilà, nous avons un endpoint sur &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:5000/&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;» &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FLASK_APP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hello.py&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; flask run
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Serving Flask app &lt;span class=&quot;s2&quot;&gt;&quot;hello.py&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Debug mode: off
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Running on http://127.0.0.1:5000/ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;locust-entre-en-jeu&quot;&gt;Locust entre en jeu&lt;/h2&gt;

&lt;p&gt;Locust permet de simuler de milliers d’utilisateurs simultanés sur notre app. Derrière le rideau, il crée un processus léger via gevent (plus précisément un &lt;a href=&quot;http://www.gevent.org/api/gevent.greenlet.html&quot;&gt;greenlet&lt;/a&gt;) par utilisateur simulé. Ce choix technique permet de simuler un grand nombre d’usagers sur une seule machine.&lt;/p&gt;

&lt;p&gt;Commençons par créer un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;locustfile.py&lt;/code&gt;. Ce fichier servira pour décrire les tests de charge.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;locust&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpLocust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserBehaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@task&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebsiteUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpLocust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserBehaviour&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;La class &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBehaviour&lt;/code&gt; nous permet de définir l’activité que les usagers vont mener. Dans notre cas il y a un seul et unique endpoint à la racine qu’on represente ici avec la fonction &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; décoré avec &lt;code class=&quot;highlighter-rouge&quot;&gt;@task&lt;/code&gt; pour indiquer à Locust qu’il s’agit d’une tâche que les utilisateurs vont effectuer.&lt;/p&gt;

&lt;p&gt;La class &lt;code class=&quot;highlighter-rouge&quot;&gt;WebsiteUser&lt;/code&gt; represente l’utilisateur lui même. On spécifie la &lt;code class=&quot;highlighter-rouge&quot;&gt;task_set&lt;/code&gt; qu’il réalisera ainsi que le temps qu’il attend entre chaque tâche - entre cinq et neuf secondes dans notre cas.&lt;/p&gt;

&lt;p&gt;Si vous avez nommé ce fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;locustfile.py&lt;/code&gt; il suffit de taper &lt;code class=&quot;highlighter-rouge&quot;&gt;locust&lt;/code&gt; dans la console pour tout démarrer. Si vous l’avez nommé différemment il faudra ajouter &lt;code class=&quot;highlighter-rouge&quot;&gt;-f &amp;lt;&amp;lt;path-to-file&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;» locust
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;date&amp;gt;] /INFO/locust.main: Starting web monitor at http://&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:8089
   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;date&amp;gt;] /INFO/locust.main: Starting Locust 0.14.4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Locust a mis en place l’interface web sur &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8089&lt;/code&gt;. Cette interface nous permet de spécifier le nombre d’usagers à simuler, le taux de création de ces utilisateurs et l’URL de l’application à tester. Démarrons nos tests avec 100 utilisateurs avec un taux de croissance de dix par seconde. Vu que notre hello-world Flask tourne toujours sur le port &lt;code class=&quot;highlighter-rouge&quot;&gt;:5000&lt;/code&gt; on peut le remplir comme cela :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/locust-1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Après avoir appuyé sur le bouton &lt;em&gt;start swarming&lt;/em&gt; le test se met en œuvre. Dans l’entête de la page on trouve le nombre d’utilisateurs simultanées, les requêtes par seconde (RPS) et le pourcentage d’échec. Plus bas, dans la table on peut aussi connaître le temps de réponse de notre application.&lt;/p&gt;

&lt;p&gt;Notez aussi les onglets :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Charts&lt;/em&gt; contient des visualisations concernant les temps de réponse, les requêtes par seconde et le nombre d’usagers,&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Failures&lt;/em&gt; et &lt;em&gt;Exceptions&lt;/em&gt; donne davantage d’information sur les problèmes rencontrés lors du test, et&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Download Data&lt;/em&gt; permet de télécharger les données bruts en CSV.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/locust-2.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;plus-dendpoints&quot;&gt;Plus d’endpoints&lt;/h2&gt;

&lt;p&gt;Dans la vie réelle on voudra tester des applications qui ont plus d’un endpoint. Par exemple, on peut avoir de comptes utilisateur (et donc un &lt;code class=&quot;highlighter-rouge&quot;&gt;/login&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;/logout&lt;/code&gt;). Puis on pourrait aussi mettre à disposition un endpoint pour paramétrer le compte (&lt;code class=&quot;highlighter-rouge&quot;&gt;/account&lt;/code&gt;) ainsi qu’un autre pour accéder au panier d’achat (&lt;code class=&quot;highlighter-rouge&quot;&gt;/cart&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Ajoutons ces nouvelles routes à notre app Flask sur &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.py&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Home'&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Login'&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/logout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Logout'&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/account'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Account'&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/cart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Cart'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;authentification&quot;&gt;Authentification&lt;/h3&gt;

&lt;p&gt;Cette fois-ci nos utilisateurs doivent s’identifier avant d’accéder aux autres pages. De plus, ils fermeront leur session après avoir fini. Les fonctions &lt;code class=&quot;highlighter-rouge&quot;&gt;on_start&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;on_stop&lt;/code&gt; sont appelées avant l’exécution de la première tâche et après la fin du TaskSet respectivement. C’est donc idéal pour placer l’authentification :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserBehaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/logout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;comportement-des-usagers&quot;&gt;Comportement des usagers&lt;/h3&gt;

&lt;p&gt;Vu le nombre des pages dans notre app, ce serait utile de paramétrer &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBehaviour&lt;/code&gt; pour que les pages ne soient pas toutes visitées pareil. Nous pouvons nous attendre à que la page d’accueil (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) soit souvent visité. D’un autre côté, du fait que les utilisateurs ne paramètrent pas leur compte tous les jours, &lt;code class=&quot;highlighter-rouge&quot;&gt;/account&lt;/code&gt; ne sera pas un passage obligé pour tous. Finalement, le panier d’achat (&lt;code class=&quot;highlighter-rouge&quot;&gt;/cart&lt;/code&gt;) se situe un peu au milieu en terme d’affluence.&lt;/p&gt;

&lt;p&gt;Pour ce faire on s’appuiera sur le décorateur &lt;code class=&quot;highlighter-rouge&quot;&gt;@task&lt;/code&gt;, plus précisément sur son paramètre facultatif entier qui répresente le poids, çad la probabilité qu’un utilisateur choisisse la tâche en question pour son action suivante. Une tâche &lt;code class=&quot;highlighter-rouge&quot;&gt;@task(10)&lt;/code&gt; a dix fois plus de probabilité d’être choisie qu’une tâche &lt;code class=&quot;highlighter-rouge&quot;&gt;@task(1)&lt;/code&gt;. Nous pouvons donc récrire notre &lt;code class=&quot;highlighter-rouge&quot;&gt;locustfile.py&lt;/code&gt; de la façon suivante :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;locust&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpLocust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserBehaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/logout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/cart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/account&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebsiteUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpLocust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserBehaviour&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Si on applique les mêmes paramètres que lors du dernier test, on obtient ces résultats :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/locust-3.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On constate que chacun des 100 utilisateurs s’est identifié et a fini par fermer sa session. Le poids qu’on a assigné aux tâches a bien été respecté : la page d’accueil a été visité autour de dix fois plus que celle de paramétrage du compte et deux fois plus que le panier d’achat.&lt;/p&gt;

&lt;h2 id=&quot;locust-en-mode-distribuée&quot;&gt;Locust en mode distribuée&lt;/h2&gt;

&lt;p&gt;Si nos besoins de simulation sont trop importants pour être faits sur une seule machine, Locust permet d’exécuter les tests de façon distribuée. Il suffit de créer une instance Locust &lt;em&gt;master&lt;/em&gt; (avec l’option &lt;code class=&quot;highlighter-rouge&quot;&gt;-master&lt;/code&gt;) à laquelle on ajoutera des noeuds créés avec l’option &lt;code class=&quot;highlighter-rouge&quot;&gt;slave&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;---master-host&lt;/code&gt; pour indiquer où se trouve l’instance maître.&lt;/p&gt;

&lt;p&gt;Sur une machine on ferait :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;locust &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; mon_locustfile.py &lt;span class=&quot;nt&quot;&gt;--master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et on ajouterait des noeuds avec :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;locust &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; mon_locustfile.py &lt;span class=&quot;nt&quot;&gt;--slave&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--master-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.14&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;en-conclusion&quot;&gt;En conclusion&lt;/h2&gt;

&lt;p&gt;Locust met à disposition des outils simples et puissants pour mesurer le comportement d’un système en fonction de la charge d’utilisateurs simultanés. La courbe d’apprentissage est particulièrement rapide, la documentation est claire et la flexibilité apportée par le choix de Python pour décrire les tests offre des vastes possibilités pour des cas spéciaux. L’interface graphique est plutôt basique, mais les données bruts sont disponibles pour ceux qui ont besoin de les traiter davantage.&lt;/p&gt;

&lt;p&gt;J’ai mis en place Locust pour mon projet actuel et je ne peux que le recommander.&lt;/p&gt;

&lt;h3 id=&quot;comparaison-avec-jmeter&quot;&gt;Comparaison avec JMeter&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://jmeter.apache.org/&quot;&gt;JMeter&lt;/a&gt; est basé sur Java et contient une interface graphique pour décrire nos tests, contrairement à Locust où on se sert du code Python. Je ne trouve pas leur UI très ergonomique : les cas d’usage de base sont plutôt difficiles à effectuer et souvent nécessitent des plugins externes pour fonctionner.&lt;/p&gt;

&lt;h3 id=&quot;comparaison-avec-tsung&quot;&gt;Comparaison avec Tsung&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://tsung.erlang-projects.org/&quot;&gt;Tsung&lt;/a&gt; est basé sur Erlang et la machine virtuelle BEAM, un très bon choix pour une application basé sur des processus légers concurrents. Par contre, Tsung a besoin d’un fichier xml cauchemardesque pour décrire les tests. De plus, le projet a l’air plutôt dormant depuis un an.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="Développement" />
      
        <category term="Python" />
      

      
        <summary type="html">Toute application doit pouvoir répondre à un certain nombre de requêtes sous un temps minimum acceptable. Locust nous aide à faire les tests de charge nécessaires pour en être sûrs.</summary>
      

      
      
    </entry>
  
</feed>
