<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://alemangui.github.io/tag/js/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://alemangui.github.io/" rel="alternate" type="text/html" />
  <updated>2020-08-21T10:11:07+02:00</updated>
  <id>http://alemangui.github.io/tag/js/feed.xml</id>

  
  
  

  
    <title type="html">Alejandro Mantecón Guillén | </title>
  

  
    <subtitle>Le blog d'Alejandro Mantecón Guillén</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Tests automatiques avec autoplay</title>
      <link href="http://alemangui.github.io/tests-automatiques-avec-autoplay" rel="alternate" type="text/html" title="Tests automatiques avec autoplay" />
      <published>2020-03-25T00:00:00+01:00</published>
      <updated>2020-03-25T00:00:00+01:00</updated>
      <id>http://alemangui.github.io/tests-automatiques-avec-autoplay</id>
      <content type="html" xml:base="http://alemangui.github.io/tests-automatiques-avec-autoplay">&lt;p&gt;Depuis 2017, les différents navigateurs implémentent des fonctionnalités permettant de bloquer le son qui démarre automatiquement. Ceci n’a rien d’étonnant : on a tous vécu la nuisance des vidéos en autoplay qui se cachent parmi les nombreux onglets du navigateur. Néanmoins, pour les développeurs qui se basent de façon légitime sur l’autoplay (notamment pour des jeux vidéos ou applications multimédia), ces restrictions peuvent causer des difficultés.&lt;/p&gt;

&lt;h2 id=&quot;les-tests-chez-pizzicato-js&quot;&gt;Les tests chez Pizzicato JS&lt;/h2&gt;

&lt;p&gt;J’ai rencontré un de ces problèmes dans le cadre du développement de &lt;a href=&quot;https://alemangui.github.io/pizzicato/&quot;&gt;Pizzicato JS&lt;/a&gt;, une librairie visant à simplifier la création et manipulation du son dans le navigateur (&lt;a href=&quot;github.com/alemangui/pizzicato/&quot;&gt;code source ouvert&lt;/a&gt;). Pizzicato compte une batterie de tests automatiques interagissant avec l’API WebAudio. Ces tests sont exécutés en Chrome depuis Travis CI à chaque nouveau commit.&lt;/p&gt;

&lt;p&gt;Avec les versions récentes de Chrome, les tests qui dépendent du son échouent systématiquement :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/failed-build.jpg&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Chrome 80.0.3987 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Linux 0.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Sound actions should trigger &lt;span class=&quot;s1&quot;&gt;'end'&lt;/span&gt; when buffer ended FAILED
	Expected spy endCallback to have been called.
	    at tests/Sound.test.js:270:26

Chrome 80.0.3987 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Linux 0.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Executed 118 of 144 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 FAILED&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 secs / 2.516 secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Chrome 80.0.3987 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Linux 0.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Sound actions should offset upon playing when specified FAILED
	Expected spy endCallback to have been called.
	    at tests/Sound.test.js:287:26

Chrome 80.0.3987 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Linux 0.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Executed 119 of 144 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 FAILED&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 secs / 4.527 secs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;la-politique-autoplay-de-chrome&quot;&gt;La politique Autoplay de Chrome&lt;/h2&gt;

&lt;p&gt;Cet échec n’est pas un mystère : les tests vont à l’encontre de la politique autoplay de Chrome : pas d’audio sans interaction utilisateur. Or, dans un contexte ou les tests automatiques se déroulent dans un processus virtuel au sein de Travis CI, l’interaction utilisateur est impossible.&lt;/p&gt;

&lt;p&gt;Heureusement, on peut lancer Chrome avec une option spéciale pour lui demander de désactiver cette politique :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Chrome &lt;span class=&quot;nt&quot;&gt;--autoplay-policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no-user-gesture-required&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pour intégrer ceci dans Pizzicato, il suffit de modifier le &lt;a href=&quot;https://github.com/alemangui/pizzicato/blob/master/karma.conf.js&quot;&gt;fichier de configuration de Karma&lt;/a&gt;. Au moment de définir les &lt;code class=&quot;highlighter-rouge&quot;&gt;customLaunchers&lt;/code&gt; nous pouvons aussi profiter pour passer des arguments additionnels.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;customLaunchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;Chrome_travis_ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Chrome'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'--no-sandbox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'--autoplay-policy=no-user-gesture-required'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;TravisCI est vert à nouveau.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/successful-build.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;et-dans-la-vraie-vie-&quot;&gt;Et dans la vraie vie ?&lt;/h2&gt;

&lt;p&gt;Comprendre les conditions qui mènent les navigateurs à bloquer le contenu audio est utile pour que nos utilisateurs puissent profiter du web sans devoir bidouiller des options obscures dans la ligne de commande.&lt;/p&gt;

&lt;h3 id=&quot;chrome&quot;&gt;Chrome&lt;/h3&gt;

&lt;p&gt;Dans Chrome, l’autoplay en muet (volume 0) est permis - d’où les boutons “Tap to unmute” qui apparaissent un peu partout. Sinon, il faut impérativement un de ces scénarios :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;l’utilisateur a interagit avec la page (par ex. en clickant quelque part),&lt;/li&gt;
  &lt;li&gt;l’utilisateur a ajouté le site dans son écran d’accueil ou l’a installé en tant que Progressive Web App, ou&lt;/li&gt;
  &lt;li&gt;le site a un &lt;em&gt;Media Engagement Index&lt;/em&gt; (MEI) suffisant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ce dernier point peut paraître un peu obscur. Le MEI tente de mesurer à quel point l’usager est habitué à consommer de l’audio/vidéo sur un site particulier. Pour ce faire, Chrome fait le calcul du ratio des visites totales contre les visites incluant une consommation média considéré comme suffisante (çad plus de sept secondes, audio non-muet, onglet actif et taille d’écran supérieure à 200x140).&lt;/p&gt;

&lt;p&gt;Pour les utilisateurs de Chrome, ces stats sont visibles sur &lt;a href=&quot;chrome://media-engagement&quot;&gt;chrome://media-engagement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/mei.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;firefox&quot;&gt;Firefox&lt;/h3&gt;

&lt;p&gt;Les règles de Firefox sont similaires à celles de Chrome : l’audio en muet est permis et l’interaction utilisateur est requise pour tout ce qui est audible.&lt;/p&gt;

&lt;p&gt;De plus, Firefox permet l’autoplay si l’utilisateur a déjà donné la permission au site d’accéder à la camera ou le micro. Ceci s’avère utile pour les sites de vidéo-conférence.&lt;/p&gt;

&lt;p&gt;En ce qui concerne les sites “de confiance” Firefox opte pour une approche plus direct. Lorsqu’un site avec autoplay est bloqué, une icône apparaît dans la barre URL. L’usager peut clicker dessus et manuellement indiquer que le site peut faire de l’autoplay sans que le navigateur s’en mêle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/autoplay-ff.jpg&quot; /&gt;
&lt;small class=&quot;caption&quot;&gt;Image de &lt;a href=&quot;https://hacks.mozilla.org/2019/02/firefox-66-to-block-automatically-playing-audible-video-and-audio/&quot;&gt;Mozilla&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;ce-nest-pas-fini&quot;&gt;Ce n’est pas fini&lt;/h2&gt;

&lt;p&gt;Les règles autour de l’audio et vidéo sur les navigateurs vont encore évoluer de façon importante dans les années qui viennent. Des discussions autour de l’étendue des restrictions autoplay &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1420389&quot;&gt;se déroulent encore&lt;/a&gt;. D’un côté, démarrer des vidéos automatiquement, même sans audio, consomme des données des forfaits potentiellement limités. D’un autre, &lt;a href=&quot;https://www.bleepingcomputer.com/news/google/google-fixes-issue-that-broke-millions-of-web-based-games-in-chrome/&quot;&gt;plein des applications multimédia&lt;/a&gt; dépendent de cette fonctionnalité. En tant que développeurs, il faudra suivre de près cette évolution.&lt;/p&gt;

&lt;h2 id=&quot;en-savoir-plus&quot;&gt;En savoir plus&lt;/h2&gt;

&lt;p&gt;Malheureusement, la plupart de la documentation autour des politiques autoplay des navigateurs est exclusivement en anglais. Voici quelques exemples :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Détails sur la &lt;a href=&quot;https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#mei&quot;&gt;politique autoplay Chrome&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Article de Chris Pearce concernant &lt;a href=&quot;https://hacks.mozilla.org/2019/02/firefox-66-to-block-automatically-playing-audible-video-and-audio/&quot;&gt;l’autoplay sur Firefox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Article de Kevin Decker sur &lt;a href=&quot;https://webkit.org/blog/7734/auto-play-policy-changes-for-macos/&quot;&gt;l’autoplay sur Safari&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation de la politique &lt;a href=&quot;https://docs.microsoft.com/fr-fr/microsoft-edge/dev-guide/browser-features/autoplay-policies&quot;&gt;autoplay sur Edge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="Développement" />
      
        <category term="JS" />
      

      
        <summary type="html">Les navigateurs implémentent des fonctionnalités permettant de bloquer le contenu audio qui démarre automatiquement. Comment s'en sortir en tant que développeur ?</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Web Audio: the ugly click and the human ear</title>
      <link href="http://alemangui.github.io/ramp-to-value" rel="alternate" type="text/html" title="Web Audio: the ugly click and the human ear" />
      <published>2015-12-26T00:00:00+01:00</published>
      <updated>2015-12-26T00:00:00+01:00</updated>
      <id>http://alemangui.github.io/ramp-to-value</id>
      <content type="html" xml:base="http://alemangui.github.io/ramp-to-value">&lt;style&gt;
.button {
    border: none;
    color: white;
    font-weight: bold;
    padding: 10px;
    min-width: 50px;
    min-height: 50px;
    border-radius: 5px;
    position: relative;
    -webkit-appearance: button;
    cursor: pointer;
    text-transform: none;
}

.stop-button {
    background-color: rgb(178, 78, 78);
    border-radius: 5px 0px 0px 5px;
}

.stop-button:hover {
    background-color: rgb(200, 106, 106);
}

.stop-button:before {
    content: &quot;&quot;;
    position: absolute;
    left: 15px;
    width: 21px;
    height: 21px;
    margin-top: -10px;
    background: white;
}

.play-button {
    background-color: rgb(103, 178, 78);
    min-width: 100px;
    border-radius: 0px 5px 5px 0px;
}

.play-button:hover {
    background-color: rgb(126, 200, 101);
}

.play-button:before {
    content: &quot;&quot;;
    position: absolute;
    left: 38px;
    border: 8px solid transparent;
    border-width: 12px 30px;
    border-left-color: #FFFFFF;
    margin-top: -12px;
    background: transparent;
}
&lt;/style&gt;

&lt;p&gt;While playing around with a Web Audio demo, I noticed a clicking sound every time a I stopped an oscillator.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AudioContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oscillatorNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillatorNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// click!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;button class=&quot;button stop-button&quot; id=&quot;1-stop-button&quot;&gt;&lt;/button&gt;
&lt;button class=&quot;button play-button&quot; id=&quot;1-play-button&quot;&gt;&lt;/button&gt;
&lt;script&gt;
	var context = new AudioContext();
	var oscillator;
	var firstIsPlaying;
	(function() {
		document.getElementById('1-play-button').addEventListener('click', function() {
			if(firstIsPlaying) return;
			oscillator = context.createOscillator();
			oscillator.connect(context.destination);
			oscillator.start();
			firstIsPlaying = true;
		}, false);
		document.getElementById('1-stop-button').addEventListener('click', function() {
			if (!firstIsPlaying) return;
			oscillator.stop();
			firstIsPlaying = false;
		}, false);		
	})();
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Could it be an implementation problem on the browser? Not likely, since this happened in all browsers I tested.&lt;/p&gt;

&lt;p&gt;Turns out the click sound happens because I’m abruptingly cutting the sound wave at a point other than the natural zero crossing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/zero-crossing-point.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Is there a way to avoid this clicking sound then?&lt;/p&gt;

&lt;p&gt;We have two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stopping the sound only at zero-point crossings, or&lt;/li&gt;
  &lt;li&gt;Creating a node gain to gradually decrease the gain to zero before stopping&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will focus on the second option since - luckily - Web Audio API has us covered.&lt;/p&gt;

&lt;h2 id=&quot;gradual-changes-to-an-audioparam-value&quot;&gt;Gradual changes to an audioParam value&lt;/h2&gt;

&lt;h3 id=&quot;exponential-vs-linear&quot;&gt;Exponential vs linear&lt;/h3&gt;

&lt;p&gt;There are several Web Audio functions that can gradually change an audioParam:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;linearRampToValueAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// linear&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exponentialRampToValueAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// exponential&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTargetAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timeConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// exponential&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One difference between them is the easing function that is used to change the audio param value; either linear (left) or exponential (right).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/exponential-linear-curves.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mozilla has a piece of advise to those unsure of which one to use:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Exponential ramps are considered more useful when changing frequencies or playback rates than linear ramps because of the way the human ear works.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And they are right: the human ear perceives sound on a logarithmic principle. An A3 note is a frequency of 220Hz, whereas A4 is 440Hz and A5 is 880Hz. Loudness also works this way: a tenfold increase in sound power could be described as being twice as loud. Hence, using an exponential gain decrease will be perceived as linear by the human ear.&lt;/p&gt;

&lt;h3 id=&quot;exponentialramptovalueattime-vs-settargetattime&quot;&gt;exponentialRampToValueAtTime vs setTargetAtTime&lt;/h3&gt;

&lt;p&gt;We will choose and exponential way of gradually decreasing the gain. This leaves us with &lt;code class=&quot;highlighter-rouge&quot;&gt;exponentialRampToValueAtTime&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt;. Some difference between them are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exponentialRampToValueAtTime&lt;/code&gt; will get to the value precisely at the time specified. However, using this function, an exponential ramp to zero &lt;a href=&quot;https://webaudio.github.io/web-audio-api/#widl-AudioParam-exponentialRampToValueAtTime-AudioParam-float-value-double-endTime&quot;&gt;is not possible&lt;/a&gt; because of the math used to calculate the values over time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt; exponentially moves towards the value given by the target parameter, but instead of specifying an end time, we give the function an exponential decay rate after which the value will decrease about 2/3rds. This means we can ask the function to go all the way down to zero. Theoretically it will never really reach zero since it will be exponentially decaying, but in real life it &lt;em&gt;will&lt;/em&gt; as soon as the value is too small to be represented with a float.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s choose &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt; because we want to go all the way down to zero and because we are not too worried about getting there at a super precise time. As long as the fade-out time is fast enough to be imperceptible but slow enough to remove the click, we will be happy.&lt;/p&gt;

&lt;h3 id=&quot;using-settargetattime-to-remove-the-click&quot;&gt;Using setTargetAtTime to remove the click&lt;/h3&gt;

&lt;p&gt;Before trying out &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt; to get rid of the ugly click, we must be of a couple gotchas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We must choose a decay time after which the gain value will decrease about 2/3rds. After a bit of experimenting, I found out that a decay time of 15 milliseconds gives the impression of being immediate but at the same time removes the click. Remember: Web Audio uses seconds instead of milliseconds!&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AudioContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createGain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;stopButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTargetAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;button class=&quot;button stop-button&quot; id=&quot;2-stop-button&quot;&gt;&lt;/button&gt;
&lt;button class=&quot;button play-button&quot; id=&quot;2-play-button&quot;&gt;&lt;/button&gt;
&lt;script&gt;
	var gainNode;
	var secondIsPlaying;
	(function() {
		document.getElementById('2-play-button').addEventListener('click', function() {
			if(secondIsPlaying) return;
			gainNode = context.createGain();
			oscillator = context.createOscillator();
			oscillator.connect(gainNode);
			gainNode.connect(context.destination);
			oscillator.start();
			secondIsPlaying = true;
		}, false);
		document.getElementById('2-stop-button').addEventListener('click', function() {
			if (!secondIsPlaying) return;
			gainNode.gain.setTargetAtTime(0, context.currentTime, 0.015);
			setTimeout(function() {
				oscillator.stop();
				secondIsPlaying = false;
			}, 40);
		}, false);		
	})();
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;There’s no more click. We are all happy.&lt;/p&gt;

&lt;h3 id=&quot;using-exponentialramptovalueattime-to-remove-the-click&quot;&gt;Using exponentialRampToValueAtTime to remove the click&lt;/h3&gt;

&lt;p&gt;Since we are at it, let’s see how it would’ve turned out using &lt;code class=&quot;highlighter-rouge&quot;&gt;exponentialRampToValueAtTime&lt;/code&gt; - which I found to be a bit trickier.&lt;/p&gt;

&lt;p&gt;One gotcha is this part of the Web Audio specification:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(exponentialRampToValueAtTime) Schedules an exponential continuous change in parameter value &lt;strong&gt;from the previous scheduled parameter value&lt;/strong&gt; to the given value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;From the previous scheduled parameter value&lt;/em&gt; means that you must first set the audioParam with an automation method before using the ramping function. This usually means using &lt;code class=&quot;highlighter-rouge&quot;&gt;setValueAtTime()&lt;/code&gt; instead of setting the audioParam value directly (in other words, don’t do this: &lt;code class=&quot;highlighter-rouge&quot;&gt;gainNode.gain.value = someValue&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Another gotcha also described in the spec:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is an error if either V0 or V1 is not strictly positive. This also implies &lt;strong&gt;an exponential ramp to 0 is not possible.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we must choose a tiny value, but not zero. As mentioned earlier, we can’t ramp to zero. Also, this time we will use 30 milliseconds as the time for the ramp to occur (this is the total transition time, not the decay time used in &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAtTime&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AudioContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createGain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oscillator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;stopButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Important! Setting a scheduled parameter value&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setValueAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

    &lt;span class=&quot;nx&quot;&gt;gainNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exponentialRampToValueAtTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;button class=&quot;button stop-button&quot; id=&quot;3-stop-button&quot;&gt;&lt;/button&gt;
&lt;button class=&quot;button play-button&quot; id=&quot;3-play-button&quot;&gt;&lt;/button&gt;
&lt;script&gt;
	var gainNode;
	var thirdIsPlaying;
	(function() {
		document.getElementById('3-play-button').addEventListener('click', function() {
			if(thirdIsPlaying) return;
			gainNode = context.createGain();
			oscillator = context.createOscillator();
			oscillator.connect(gainNode);
			gainNode.connect(context.destination);
			oscillator.start();
			thirdIsPlaying = true;
		}, false);
		document.getElementById('3-stop-button').addEventListener('click', function() {
			if (!thirdIsPlaying) return;
			gainNode.gain.setValueAtTime(gainNode.gain.value, context.currentTime);
			gainNode.gain.exponentialRampToValueAtTime(0.0001, context.currentTime + 0.03);
			setTimeout(function() {
				oscillator.stop();
				thirdIsPlaying = false;
			}, 30);
		}, false);		
	})();
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Also works, we’ve gotten rid of the click.&lt;/p&gt;

&lt;h2 id=&quot;more-info&quot;&gt;More info&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.audiocheck.net/soundtests_nonlinear.php&quot;&gt;The non-linearities of the human ear&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/webaudio/#AudioParam&quot;&gt;The AudioParam interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime&quot;&gt;Mozilla’s documentation for setTargetAtTime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime&quot;&gt;Mozilla’s documentation for exponentialRampToValueAtTime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="Web audio" />
      
        <category term="JS" />
      

      
        <summary type="html">While playing around with a Web Audio demo, I noticed a clicking sound every time a I stopped an oscillator. Is there a way to avoid it?</summary>
      

      
      
    </entry>
  
</feed>
